\frametitle{11.3~泛型算法——\small {使用function}}
我们可以将前述不同表现形式的对象用\textbf{function类模板}统一起来：
^^I\begin{columns}[T]
^^I^^I\column{0.65\textwidth}
^^I^^I\begin{blueblock}{定义function对象}

^^I^^I^^I\vspace{-2mm}\begin{lstlisting}[moreemph={T}]
using CallType = bool(LargeData*, LargeData*);
function<CallType> f1 = Less; //函数
function<CallType> f2 = Compare(); //函数对象
function<CallType> f3 = [](const LargeData *a, const LargeData *b) {return a->m_id < b->m_id; }; //lambda
function<CallType> f4 = //bind函数
bind(Less, std::placeholders::_2, std::placeholders::_1);
            \end{lstlisting}\vspace{-2mm}
^^I^^I\end{blueblock}
^^I^^I\begin{blueblock}{使用function对象}
            \vspace{-2mm}
^^I^^I^^I\begin{lstlisting}[moreemph={T}]
LargeData a(0), b(1);
if (f1(&a, &b)) {/*...*/}
if (f2(&a, &b)) {/*...*/}
if (f3(&a, &b)) {/*...*/}
if (f4(&a, &b)) {/*...*/}
                \end{lstlisting}
            \vspace{-2mm}
^^I^^I\end{blueblock}
^^I^^I\column{0.3\textwidth}
^^I^^I\begin{block}
^^I^^I^^I{funcion}
^^I^^I^^I\alert{通用多态函数封装器}，其实例能存储、复制及调用任何\alert{可调用 (Callable) 目标}
^^I^^I\end{block}
^^I^^I\begin{yellowblock}
^^I^^I^^I{说明}
^^I^^I^^I使用CallType类型统一了各种形式的调用\\
^^I^^I\end{yellowblock}
^^I\end{columns}
